<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<link rel="stylesheet" type="text/css" href="css/normalize.css" />
	<script src="~/Scripts/snap.svg-min.js"></script>
	<script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
	<link href="https://fonts.googleapis.com/css?family=Crete+Round:400i|IBM+Plex+Sans:700|Merriweather+Sans|Stylish|Work+Sans" rel="stylesheet">
	<link href="https://fonts.googleapis.com/css?family=Quicksand" rel="stylesheet">


	<title>@ViewBag.Title - Conversion Station</title>
	@Styles.Render("~/Content/css")
	@Scripts.Render("~/bundles/modernizr")
</head>
<body>
    <!---->

    <nav id="menu" class="menu">
        <button class="menu__handle"><span>Menu</span></button>
        <div class="menu__inner"> <div class="menutext">
    <ul>
        <li>@Html.ActionLink("Home", "Index", "Home")</li>
        @*<li>@Html.ActionLink("About", "About", "Home")</li>
        <li>@Html.ActionLink("Contact", "Contact", "Home")</li>*@
        <li>@Html.ActionLink("Gallons & Liters", "ConvertGallons", "Home")</li>
        <li>@Html.ActionLink("Celsius & Fahrenheit", "ConvertCF", "Home")</li>
        <li>@Html.ActionLink("Kilograms & Pounds", "ConvertKP", "Home")</li>
    </ul>
</div>
        </div>
        <div class="morph-shape" data-morph-open="M-10,100c0,0,44-95,290-95c232,0,290,95,290,95" data-morph-close="M-10,100c0,0,44,95,290,95c232,0,290-95,290-95">
            <svg width="100%" height="100%" viewBox="0 0 560 200" preserveAspectRatio="none">
                <path fill="none" d="M-10,100c0,0,44,0,290,0c232,0,290,0,290,0" />
            </svg>
        </div>
    </nav>


    <!---->








    @*<div class="navbar navbar-inverse navbar-fixed-top">
        <div class="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                @Html.ActionLink("Conversion Station", "Index", "Home", new { area = "" }, new { @class = "navbar-brand" })
            </div>
            <div class="navbar-collapse collapse">
                <ul class="nav navbar-nav">
                    <li>@Html.ActionLink("Home", "Index", "Home")</li>
                    <li>@Html.ActionLink("About", "About", "Home")</li>
                    <li>@Html.ActionLink("Contact", "Contact", "Home")</li>
                    <li>@Html.ActionLink("Gallons/Pounds", "ConvertGallons", "Home")</li>
                    <li>@Html.ActionLink("Cels/Fehr", "ConvertCF", "Home")</li>
                    <li>@Html.ActionLink("Kilograms/Pounds", "ConvertKP", "Home")</li>
                </ul>
            </div>
        </div>
    </div>*@
    <div class="container body-content">
        @RenderBody()
        @*<hr />
        <footer>
            <p>&copy; @DateTime.Now.Year - Conversion Station</p>
        </footer>*@
    </div>
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @RenderSection("scripts", required: false)


    <script src="~/Scripts/classie.js"></script>
    <script>
        (function () {

            function SVGMenu(el, options) {
                this.el = el;
                this.init();
            }

            SVGMenu.prototype.init = function () {
                this.trigger = this.el.querySelector('button.menu__handle');
                this.shapeEl = this.el.querySelector('div.morph-shape');

                var s = Snap(this.shapeEl.querySelector('svg'));
                this.pathEl = s.select('path');
                this.paths = {
                    reset: this.pathEl.attr('d'),
                    open: this.shapeEl.getAttribute('data-morph-open'),
                    close: this.shapeEl.getAttribute('data-morph-close')
                };

                this.isOpen = false;

                this.initEvents();
            };

            SVGMenu.prototype.initEvents = function () {
                this.trigger.addEventListener('click', this.toggle.bind(this));
            };

            SVGMenu.prototype.toggle = function () {
                var self = this;

                if (this.isOpen) {
                    classie.remove(self.el, 'menu--anim');
                    setTimeout(function () { classie.remove(self.el, 'menu--open'); }, 250);
                }
                else {
                    classie.add(self.el, 'menu--anim');
                    setTimeout(function () { classie.add(self.el, 'menu--open'); }, 250);
                }
                this.pathEl.stop().animate({ 'path': this.isOpen ? this.paths.close : this.paths.open }, 350, mina.easeout, function () {
                    self.pathEl.stop().animate({ 'path': self.paths.reset }, 800, mina.elastic);
                });

                this.isOpen = !this.isOpen;
            };

            new SVGMenu(document.getElementById('menu'));

        })();
    </script>
</body>
</html>
